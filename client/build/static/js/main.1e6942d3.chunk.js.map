{"version":3,"sources":["components/frame.js","dtos/property-dto.js","components/property-item.js","components/property-list.js","actions/booking-actions.js","services/api-service.js","dtos/find-properties-dto.js","actions/find-properties-actions.js","helpers/api-action-helper.js","containers/property-list-container.js","components/property-data-list.js","dtos/booking-dto.js","components/booking-dialog.js","containers/booking-dialog-container.js","components/app.js","reducers/find-properties-reducer.js","reducers/booking-reducer.js","reducers/index.js","index.js"],"names":["Frame","className","AppBar","position","Toolbar","Typography","variant","Container","this","props","children","React","Component","PropertyDto","name","longtidude","latidude","url","city","street","distance","PropertyItem","ListItem","button","onClick","property","ListItemIcon","ListItemText","primary","secondary","PropertyList","placeholder","onChange","displayList","isPending","CircularProgress","hasError","List","properties","map","prop","key","genKey","OPEN_BOOKING_DIALOG","COMMIT_BOOKING_PENDING","COMMIT_BOOKING_SUCCESS","COMMIT_BOOKING_ERROR","openBookingDialog","type","openedProperty","commitBookingSuccess","pending","error","request","require","ApiService","bookingDto","method","uri","API_URL","body","json","findPropertiesDto","data","result","Object","assign","FindPropertiesDto","query","search_query","FIND_PROPS_PENDING","FIND_PROPS_SUCCESS","FIND_PROPS_ERROR","findPropsError","ApiActionHelper","dispatch","searchQuery","getGeoLocation","pos","coords","longitude","latitude","callFindPropertiesService","callback","navigator","geolocation","getCurrentPosition","findProperties","then","propertyDto","catch","e","console","log","callCreateNewBookingService","createNewBooking","connect","state","event","target","value","PropertyDataList","genListItem","text","icon","isLink","Link","href","BookingDto","bookingId","propertyId","propertyName","fromDate","toDate","userId","userName","email","id","property_id","property_name","from_date","to_date","user","BookingDialog","getDefaultState","Date","getTime","bookingButtonClicked","stateKey","stateObj","setState","date","toISOString","onCommitBooking","onClose","Dialog","onDialogClose","bind","aria-labelledby","open","noValidate","autoComplete","genTextField","MuiPickersUtilsProvider","utils","DateFnsUtils","genDatePicker","genCommitBookingButton","labelText","TextField","label","margin","onTextChange","disableToolbar","format","onDateChange","comp","onBookingButtonClick","setTimeout","Button","color","setBookingDialog","App","store","defaultState","input","combineReducers","action","createStore","rootReducer","render","document","getElementById"],"mappings":"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","file":"static/js/main.1e6942d3.chunk.js","sourcesContent":["import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport LocationSearchingIcon from '@material-ui/icons/LocationSearching';\r\nimport { Container } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\nimport '../public/style.css';\r\n\r\n\r\n//signature\r\nconst PROP_TYPES = {\r\n    children : PropTypes.arrayOf(PropTypes.element).isRequired\r\n}\r\n\r\n/**\r\n * Outer frame with appbar of the application\r\n */\r\nexport default class Frame extends React.Component {\r\n    \r\n    render(){\r\n        return (\r\n            <div className=\"outer-frame\">\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <LocationSearchingIcon className=\"padding-lr\"/>\r\n                        <Typography variant=\"h6\" >\r\n                            Find properties near your place\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <Container className=\"inner-frame\">\r\n                    {this.props.children}\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nFrame.propTypes = PROP_TYPES;","export default class PropertyDto{\r\n    \r\n    /**\r\n     * @param {String} name \r\n     * @param {number} longtidude \r\n     * @param {number} latidude \r\n     * @param {String} url \r\n     * @param {String} city \r\n     * @param {String} street \r\n     * @param {String} distance \r\n     */\r\n    constructor(name, longtidude, latidude, url, city, street, distance){\r\n        this.name = name;\r\n        this.longtidude = longtidude;\r\n        this.latidude = latidude;\r\n        this.url = url;\r\n        this.city = city;\r\n        this.street = street;\r\n        this.distance = distance;\r\n    }\r\n\r\n}","import React from 'react';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport BusinessIcon from '@material-ui/icons/Business';\r\nimport '../public/style.css';\r\n\r\nimport PropertyDto from '../dtos/property-dto';\r\nimport PropTypes from 'prop-types';\r\n\r\n//signature\r\nconst PROP_TYPES = {\r\n    //Property to show\r\n    property : PropTypes.instanceOf(PropertyDto).isRequired,\r\n    //on click on a item: function(PropertyDto)\r\n    onClick : PropTypes.func.isRequired,\r\n}\r\n\r\n/**\r\n * Displays a clickable icon with a text and a static icon\r\n */\r\nexport default class PropertyItem extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <ListItem \r\n                className=\"property-item\" \r\n                button \r\n                onClick={() => { this.props.onClick(this.props.property)\r\n                }}>\r\n                <ListItemIcon>\r\n                    <BusinessIcon />\r\n                </ListItemIcon>\r\n                <ListItemText \r\n                    primary={this.props.property.name} \r\n                    secondary={this.props.property.distance}\r\n                    />\r\n            </ListItem>)\r\n    }\r\n\r\n}\r\n\r\nPropertyItem.propTypes = PROP_TYPES;","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport List from '@material-ui/core/List';\r\nimport PropertyItem from './property-item';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport '../public/style.css';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport PropertyDto from '../dtos/property-dto';\r\nimport PropTypes from 'prop-types';\r\n\r\n//signature\r\nconst PROP_TYPES = {\r\n    //properties to show\r\n    properties: PropTypes.arrayOf(PropTypes.instanceOf(PropertyDto)).isRequired,\r\n    //if find properties is pending\r\n    isPending: PropTypes.bool.isRequired,\r\n    //if finding properties has caused an error\r\n    hasError: PropTypes.bool.isRequired,\r\n    //on click on a item: function(PropertyDto)\r\n    onClick: PropTypes.func.isRequired,\r\n    //on text change of the search bar function(event)\r\n    onChange: PropTypes.func.isRequired\r\n}\r\n\r\n/**\r\n * Displays a list of PropertyItems and a search bar\r\n */\r\nexport default class PropertyList extends React.Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <ListItem className=\"property-item\">\r\n                    <ListItemIcon>\r\n                        <SearchIcon />\r\n                    </ListItemIcon>\r\n                    <input\r\n                        className=\"search-prop-input\"\r\n                        placeholder=\"Enter a search term...\"\r\n                        onChange={this.props.onChange}\r\n                    />\r\n                </ListItem>\r\n                {\r\n                    this.displayList()\r\n                }\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n    /**\r\n     * shows the list\r\n     * @returns {React.Component}\r\n     */\r\n    displayList() {\r\n\r\n        if (this.props.isPending) {\r\n\r\n            //show loading spinner\r\n            return (<CircularProgress />);\r\n\r\n        } else if (this.props.hasError) {\r\n\r\n            //show error message\r\n            return (\r\n                <Typography variant='subtitle1'>\r\n                    <label>An error occurred.\r\n                    </label>\r\n                </Typography>\r\n            );\r\n\r\n        }\r\n\r\n        //show list\r\n        return (<List>\r\n            {this.props.properties.map((prop) => (\r\n                <PropertyItem key={this.genKey(prop)} property={prop} onClick={this.props.onClick} />\r\n            ))}\r\n        </List>);\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * Generates a key for a property\r\n     * @param {PropertyDto} prop\r\n     * @returns {String} \r\n     */\r\n    genKey(prop) {\r\n        return prop.name\r\n            + prop.latidude\r\n            + prop.latidude;\r\n    }\r\n\r\n}\r\n\r\nPropertyList.propTypes = PROP_TYPES;","export const OPEN_BOOKING_DIALOG = 'OPEN_BOOKING_DIALOG';\r\nexport const COMMIT_BOOKING_PENDING = 'COMMIT_BOOKING_PENDING';\r\nexport const COMMIT_BOOKING_SUCCESS = 'COMMIT_BOOKING_SUCCESS'; \r\nexport const COMMIT_BOOKING_ERROR = 'COMMIT_BOOKING_ERROR'; \r\n\r\n/**\r\n * Open booking dialog action\r\n * use null for property for closing \r\n * the dialog\r\n * @param {PropertyDto} property  \r\n * @returns {Action} - redux action\r\n */\r\nexport function openBookingDialog(property){\r\n    return {\r\n        type : OPEN_BOOKING_DIALOG,\r\n        openedProperty : property\r\n    }\r\n}\r\n\r\n/**\r\n * commit booking pending action\r\n * @returns {Action} - redux action\r\n */\r\nexport function commitBookingPending(){\r\n    return {\r\n        type : COMMIT_BOOKING_PENDING,\r\n        pending : true,\r\n        error : false\r\n    };\r\n}\r\n\r\n/**\r\n * commit booking success action\r\n * @returns {Action} - redux action\r\n */\r\nexport function commitBookingSuccess(){\r\n    return {\r\n        type : COMMIT_BOOKING_SUCCESS,\r\n        pending : false,\r\n        error : false\r\n    };\r\n}\r\n\r\n/**\r\n * commit booking error action\r\n * @returns {Action} - redux action\r\n */\r\nexport function commitBookingError(){\r\n    return {\r\n        type : COMMIT_BOOKING_ERROR,\r\n        pending : false,\r\n        error : true\r\n    };\r\n}\r\n","import PropertyDto from '../dtos/property-dto';\r\n\r\nconst request = require('request-promise-native');\r\n\r\nconst API_URL = \"http://127.0.0.1:8080\";\r\nconst FIND_PROPS_URL = API_URL + \"/properties\";\r\nconst CREATE_BOOKING_URL = API_URL + \"/users/booking/new\";\r\n\r\nexport default class ApiService{\r\n\r\n    /**\r\n     * Creates a new booking \r\n     * @param {BookingDto} bookingDto \r\n     * @returns {Promise<>}\r\n     */\r\n    static async createNewBooking(bookingDto){\r\n        await request({\r\n            method: 'POST',\r\n            uri : CREATE_BOOKING_URL,\r\n            body : bookingDto,\r\n            json : true\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns properties near to the given location\r\n     * @param {FindPropertiesDto} findPropertiesDto \r\n     * @returns {Promise<PropertyDto[]>}\r\n     */\r\n    static async findProperties(findPropertiesDto){\r\n        let data = await request({\r\n            method: 'POST',\r\n            uri : FIND_PROPS_URL,\r\n            body : findPropertiesDto,\r\n            json : true\r\n        });\r\n\r\n        return data.result\r\n            //map to PropertyDto instance\r\n            .map((prop) => Object.assign(new PropertyDto(), prop));\r\n    }\r\n\r\n}","export default class FindPropertiesDto{\r\n    \r\n    /**\r\n     * @param {number} longtidude \r\n     * @param {number} latidude \r\n     * @param {String} query - optional\r\n     */\r\n    constructor(longtidude, latidude, query){\r\n        this.longtidude = longtidude;\r\n        this.latidude = latidude;\r\n        this.search_query = query\r\n    }\r\n    \r\n}","export const FIND_PROPS_PENDING = 'FIND_PROPS_PENDING';\r\nexport const FIND_PROPS_SUCCESS = 'FIND_PROPS_SUCCESS';\r\nexport const FIND_PROPS_ERROR = 'FIND_PROPS_ERROR';\r\n\r\n/**\r\n * find properties pending action\r\n * @returns {Action} - redux action\r\n */\r\nexport function findPropsPending(){\r\n    return {\r\n        type : FIND_PROPS_PENDING,\r\n        properties : [],\r\n        pending : true,\r\n        error : false\r\n    };\r\n}\r\n\r\n/**\r\n * find properties success action\r\n * @param {PropertyDto[]} properties\r\n * @returns {Action} - redux action\r\n */\r\nexport function findPropsSuccess(properties){\r\n    return {\r\n        type : FIND_PROPS_SUCCESS,\r\n        properties : properties,\r\n        pending : false,\r\n        error : false\r\n    };\r\n}\r\n\r\n/**\r\n * find properties error action\r\n * @returns {Action} - redux action\r\n */\r\nexport function findPropsError(){\r\n    return {\r\n        type : FIND_PROPS_ERROR,\r\n        properties : [],\r\n        pending : false,\r\n        error : true\r\n    };\r\n}","import ApiService from '../services/api-service';\r\nimport FindPropertiesDto from '../dtos/find-properties-dto';\r\nimport {findPropsPending, findPropsSuccess, findPropsError} from '../actions/find-properties-actions';\r\nimport {commitBookingPending, commitBookingSuccess, commitBookingError} from '../actions/booking-actions';\r\n\r\nexport default class ApiActionHelper{\r\n\r\n    /**\r\n     * Calls the actions for finding properties\r\n     * @param {function} dispatch \r\n     * @param {String} searchQuery \r\n     */\r\n    static findProperties(dispatch, searchQuery){\r\n\r\n        ApiActionHelper.getGeoLocation(dispatch, (pos) => {\r\n\r\n            //create request object\r\n            let findPropertiesDto = new FindPropertiesDto(\r\n                pos.coords.longitude, \r\n                pos.coords.latitude,\r\n                searchQuery\r\n                );\r\n\r\n            ApiActionHelper.callFindPropertiesService(dispatch, findPropertiesDto)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the geo location\r\n     * @param {function} dispatch \r\n     * @param {function} callback \r\n     */\r\n    static getGeoLocation(dispatch, callback){\r\n        if(navigator.geolocation){\r\n            navigator.geolocation.getCurrentPosition(callback);\r\n        }else{\r\n            //send serror action if there is no geolocation\r\n            dispatch(findPropsError());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets properties by the api and sends actions\r\n     * @param {function} dispatch \r\n     * @param {FindPropertiesDto} findPropertiesDto \r\n     */\r\n    static callFindPropertiesService(dispatch, findPropertiesDto){\r\n\r\n        ApiService.findProperties(findPropertiesDto).then((propertyDto) => {\r\n\r\n            dispatch(findPropsSuccess(propertyDto));\r\n\r\n        }).catch((e) => {\r\n\r\n            console.log(e);\r\n\r\n            dispatch(findPropsError());\r\n\r\n        });\r\n\r\n        dispatch(findPropsPending());\r\n\r\n    }\r\n\r\n    /**\r\n     * Creates a new booking sends actions\r\n     * function wrapper for callCreateNewBookingService\r\n     * @param {function} dispatch \r\n     * @param {BookingDto} bookingDto \r\n     */\r\n    static createNewBooking(dispatch, bookingDto){\r\n        ApiActionHelper.callCreateNewBookingService(dispatch, bookingDto);\r\n    }\r\n\r\n    /**\r\n     * Creates a new booking sends actions\r\n     * @param {function} dispatch \r\n     * @param {BookingDto} bookingDto \r\n     */\r\n    static callCreateNewBookingService(dispatch, bookingDto){\r\n\r\n        ApiService.createNewBooking(bookingDto).then((propertyDto) => {\r\n            \r\n            dispatch(commitBookingSuccess());\r\n\r\n        }).catch((e) => {\r\n\r\n            dispatch(commitBookingError());\r\n\r\n        });\r\n        dispatch(commitBookingPending());\r\n\r\n    } \r\n\r\n}","import { connect } from 'react-redux'\r\nimport PropertyList from '../components/property-list';\r\nimport {openBookingDialog} from '../actions/booking-actions';\r\nimport ApiActionHelper from '../helpers/api-action-helper';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        //properties to show in list\r\n        properties: state.findProperties.properties,\r\n\r\n        //error and pending for finding properties\r\n        isPending: state.findProperties.pending,\r\n        hasError: state.findProperties.error\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n        //open dialog on click on property item\r\n        onClick : property => dispatch(openBookingDialog(property)),\r\n        //update list on text field change\r\n        onChange : event => ApiActionHelper.findProperties(dispatch, event.target.value)\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(PropertyList)\r\n\r\n","import React from 'react';\r\nimport '../public/style.css';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport BusinessIcon from '@material-ui/icons/Business';\r\nimport LocationIcon from '@material-ui/icons/MyLocation';\r\nimport NearMeIcon from '@material-ui/icons/NearMe';\r\nimport LanguageIcon from '@material-ui/icons/Language';\r\nimport Link from '@material-ui/core/Link';\r\nimport PropertyDto from '../dtos/property-dto';\r\nimport PropTypes from 'prop-types';\r\n\r\n//signature\r\nconst PROP_TYPES = {\r\n    //Property to show data of\r\n    property : PropTypes.instanceOf(PropertyDto)\r\n}\r\n\r\n/**\r\n * Displays property data of a booking dto\r\n */\r\nexport default class PropertyDataList extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <List>\r\n                {this.genListItem(this.props.property, \"name\")}\r\n                {this.genListItem(this.props.property, \"city\")}\r\n                {this.genListItem(this.props.property, \"street\")}\r\n                {this.genListItem(this.props.property, \"distance\")}\r\n                {this.genListItem(this.props.property, \"url\")}\r\n            </List>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns a ListItem with a value from bookingDto\r\n     * and the right Icon to it\r\n     * @param {BookingDto} bookingDto \r\n     * @param {String} key - key for value in bookingDto\r\n     * @returns {React.Component}\r\n     */\r\n    genListItem(bookingDto, key) {\r\n\r\n        let text = bookingDto[key];\r\n\r\n        //display nothing when there is no next\r\n        if (!text) {\r\n            return;\r\n        }\r\n\r\n\r\n        //get right icon\r\n        let icon;\r\n\r\n        //set a link property when key is url\r\n        let isLink = false;\r\n        switch (key) {\r\n            case \"name\":\r\n                icon = (<BusinessIcon />);\r\n                break;\r\n            case \"city\": case \"street\":\r\n                icon = (<LocationIcon />);\r\n                break;\r\n            case \"distance\":\r\n                icon = (<NearMeIcon />);\r\n                break;\r\n            case \"url\":\r\n                icon = (<LanguageIcon />);\r\n                isLink = true;\r\n                break;\r\n            default:\r\n                icon = (<BusinessIcon />);\r\n        }\r\n\r\n        return (\r\n            <ListItem>\r\n                <ListItemIcon>\r\n                    {icon}\r\n                </ListItemIcon>\r\n                {\r\n                    !isLink ?\r\n                        <ListItemText primary={text}></ListItemText>\r\n                        :\r\n                        <Link href={text}>\r\n                            More Data\r\n                </Link>}\r\n            </ListItem>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nPropertyDataList.propTypes = PROP_TYPES;","export default class BookingDto{\r\n\r\n    /**\r\n     * @param {String} bookingId \r\n     * @param {String} propertyId \r\n     * @param {String} propertyName \r\n     * @param {number} longtidude \r\n     * @param {number} latidude \r\n     * @param {String} city \r\n     * @param {String} street \r\n     * @param {String} url \r\n     * @param {String} fromDate \r\n     * @param {String} toDate \r\n     * @param {String} userId - optional\r\n     * @param {String} userName - optional\r\n     * @param {String} email - if !email then the dto \r\n     * will not contain the user property, optional\r\n     */\r\n    constructor(bookingId, propertyId, propertyName, longtidude, latidude, \r\n        city, street, url, fromDate, toDate, userId, userName, email){\r\n        this.id = bookingId;\r\n        this.property_id = propertyId;\r\n        this.property_name = propertyName;\r\n        this.longtidude = longtidude;\r\n        this.latidude = latidude;\r\n        this.city = city;\r\n        this.street = street;\r\n        this.url = url;\r\n        this.from_date = fromDate;\r\n        this.to_date = toDate;\r\n        if(email){\r\n            this.user = {\r\n                id : userId,\r\n                name : userName,\r\n                email : email\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n}","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Container } from '@material-ui/core';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n    KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport Button from '@material-ui/core/Button';\r\nimport '../public/style.css';\r\nimport PropertyDataList from './property-data-list';\r\nimport BookingDto from '../dtos/booking-dto';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport PropertyDto from '../dtos/property-dto';\r\nimport PropTypes from 'prop-types';\r\n\r\n//signature\r\nconst PROP_TYPES = {\r\n    //Property to show\r\n    property : PropTypes.instanceOf(PropertyDto),\r\n    //if commit booking is pending\r\n    isPending : PropTypes.bool.isRequired,\r\n    //if commit booking caused an error\r\n    hasError : PropTypes.bool.isRequired,\r\n    //on close dialg\r\n    onClose : PropTypes.func.isRequired,\r\n    //on commit booking: function(BookingDto)\r\n    onCommitBooking : PropTypes.func.isRequired\r\n}\r\n\r\nexport default class BookingDialog extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        //initial state\r\n        this.state = this.getDefaultState();\r\n    }\r\n\r\n    /**\r\n     * returns a default state for textfields and datepickers\r\n     * @returns {any}\r\n     */\r\n    getDefaultState() {\r\n        let fromDate = new Date();\r\n\r\n        //fromDate + one day\r\n        let toDate = new Date(fromDate.getTime() + (1000 * 60 * 60 * 24));\r\n\r\n        let defState = {\r\n            bookingButtonClicked : false,\r\n            name: \"\",\r\n            email: \"\",\r\n            fromDate: fromDate,\r\n            toDate: toDate\r\n        };\r\n\r\n        return defState;\r\n    }\r\n\r\n    /**\r\n     * Returns a function that has as \r\n     * parameter a event and updates the \r\n     * local state by statekey and the event\r\n     * @param {String} stateKey \r\n     * @returns {function}\r\n     */\r\n    onTextChange(stateKey) {\r\n        return ((event) => {\r\n            let stateObj = {};\r\n            stateObj[stateKey] = event.target.value;\r\n            this.setState(stateObj)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns a function that has as \r\n     * parameter a date and updates the \r\n     * local state by statekey and the date\r\n     * @param {String} stateKey \r\n     * @returns {function}\r\n     */\r\n    onDateChange(stateKey) {\r\n        return ((date) => {\r\n            let stateObj = {};\r\n            stateObj[stateKey] = date;\r\n            this.setState(stateObj)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a bookingDto and calls \r\n     * props.onCommitBooking(bookingDt)\r\n     */\r\n    onBookingButtonClick() {\r\n\r\n        this.setState({\r\n            bookingButtonClicked : true\r\n        })\r\n        //this.state.bookingButtonClicked = true;\r\n\r\n        let bookingDto = new BookingDto(\r\n            \"\", \"\",\r\n            this.props.property.name,\r\n            this.props.property.longtidude,\r\n            this.props.property.latidude,\r\n            this.props.property.city,\r\n            this.props.property.street,\r\n            this.props.property.url,\r\n            this.state.fromDate.toISOString(),\r\n            this.state.toDate.toISOString(),\r\n            \"\",\r\n            this.state.name,\r\n            this.state.email\r\n        );\r\n\r\n        this.props.onCommitBooking(bookingDto);\r\n    }\r\n\r\n    /**\r\n     * Resets dialog to default state and calls\r\n     * props.onClose()\r\n     */\r\n    onDialogClose() {\r\n        this.setState(this.getDefaultState());\r\n        this.props.onClose();\r\n    }\r\n\r\n    render() {\r\n\r\n        //display nothing if !prop.property\r\n        if (!this.props.property) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <Dialog\r\n                onClose={this.onDialogClose.bind(this)}\r\n                aria-labelledby=\"simple-dialog-title\"\r\n                open={true}>\r\n                <Container className=\"booking-dialog-holder\">\r\n                    <PropertyDataList property={this.props.property} />\r\n                    <form noValidate autoComplete=\"off\">\r\n                        {this.genTextField(\"name\", \"Name\")}\r\n                        {this.genTextField(\"email\", \"E-Mail\")}\r\n                        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                            {this.genDatePicker('fromDate', 'From Date')}\r\n                            {this.genDatePicker('toDate', 'To Date')}\r\n                            {this.genCommitBookingButton()}\r\n                        </MuiPickersUtilsProvider>\r\n                    </form>\r\n                </Container>\r\n            </Dialog>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Generates text filed\r\n     * @param {String} stateKey - key in current state\r\n     * @param {String} labelText \r\n     * @returns {React.Component}\r\n     */\r\n    genTextField(stateKey, labelText) {\r\n        return (\r\n            <TextField\r\n                className=\"text-field\"\r\n                label={labelText}\r\n                margin=\"normal\"\r\n                value={this.state[stateKey]}\r\n                onChange={this.onTextChange(stateKey)\r\n                    .bind(this)}\r\n            />\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Generates date picker\r\n     * @param {String} stateKey - key in current state\r\n     * @param {String} labelText \r\n     * @returns {React.Component}\r\n     */\r\n    genDatePicker(stateKey, labelText) {\r\n        return (\r\n            <KeyboardDatePicker\r\n                disableToolbar\r\n                variant=\"inline\"\r\n                className=\"text-field\"\r\n                format=\"dd/MM/yyyy\"\r\n                margin=\"normal\"\r\n                label={labelText}\r\n                value={this.state[stateKey]}\r\n                onChange={this.onDateChange(stateKey)\r\n                    .bind(this)}\r\n            />\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Generates booking button with loading spinner \r\n     * and error message\r\n     * @returns {React.Component}\r\n     */\r\n    genCommitBookingButton() {\r\n\r\n        let comp;\r\n\r\n        let onClick = this.onBookingButtonClick.bind(this);\r\n\r\n        if (this.props.isPending) {\r\n            comp = (<CircularProgress />);\r\n        } else if (this.props.hasError) {\r\n            comp = (\r\n                <Typography variant='subtitle1'>\r\n                    <label>An error occurred.\r\n                    Watch out that the e-mail is valid and that the from date is before the to date\r\n                    </label>\r\n                </Typography>\r\n            );\r\n        }else if(this.state.bookingButtonClicked){\r\n\r\n            //show a success message \r\n            onClick = null;\r\n\r\n            comp = (\r\n                <Typography variant='subtitle1'>\r\n                    <label>Booking was successful</label>\r\n                </Typography>\r\n            );\r\n\r\n            //close after some milliseconds\r\n            setTimeout(() => this.onDialogClose(), 800);\r\n\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {comp}\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className=\"text-field book-btn\"\r\n                    onClick={onClick}>\r\n                    Commit booking\r\n            </Button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nBookingDialog.propTypes = PROP_TYPES;","import { connect } from 'react-redux';\r\nimport BookingDialog from '../components/booking-dialog';\r\nimport {openBookingDialog, commitBookingSuccess} from '../actions/booking-actions';\r\nimport ApiActionHelper from '../helpers/api-action-helper';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        //the property that will be opened\r\n        //use null for closing\r\n        property : state.setBookingDialog.openedProperty,\r\n\r\n        //error and pending for commit booking\r\n        isPending : state.setBookingDialog.pending,\r\n        hasError : state.setBookingDialog.error\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onClose : () => {\r\n        //close dialog\r\n        dispatch(openBookingDialog(null))\r\n        //reset the state\r\n        dispatch(commitBookingSuccess())\r\n    },\r\n    onCommitBooking : (bookingDto) => {\r\n        ApiActionHelper.createNewBooking(dispatch, bookingDto)\r\n    }\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(BookingDialog)\r\n","import React from 'react'\r\nimport Frame from './frame';\r\nimport PropertyListContainer from '../containers/property-list-container';\r\nimport ApiActionHelper from '../helpers/api-action-helper';\r\nimport BookingDialogContainer from '../containers/booking-dialog-container';\r\n\r\n/**\r\n * Main component, combines all other components\r\n */\r\nexport default class App extends React.Component {\r\n\r\n    componentDidMount(){\r\n        //find and display properties, on page build\r\n        ApiActionHelper.findProperties(this.props.store.dispatch);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Frame>\r\n                <PropertyListContainer/>\r\n                <BookingDialogContainer/>\r\n            </Frame>\r\n        );\r\n    }\r\n\r\n}","import {\r\n    FIND_PROPS_PENDING,\r\n    FIND_PROPS_SUCCESS,\r\n    FIND_PROPS_ERROR\r\n  } from '../actions/find-properties-actions';\r\n\r\nconst defaultState = {\r\n    properties : [],\r\n    pending : false,\r\n    error : false,\r\n    input : \"\"\r\n}\r\n\r\n\r\nexport default function findProperties(state = defaultState, action){\r\n    \r\n    switch(action.type){\r\n\r\n        //all actions share the same properties\r\n        //all three in one case for merging\r\n        case FIND_PROPS_ERROR: \r\n        case FIND_PROPS_PENDING: \r\n        case FIND_PROPS_SUCCESS:\r\n            return Object.assign({}, state, {\r\n                properties : action.properties,\r\n                pending : action.pending,\r\n                error : action.error\r\n            });\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n","import {\r\n    OPEN_BOOKING_DIALOG,\r\n    COMMIT_BOOKING_PENDING,\r\n    COMMIT_BOOKING_ERROR,\r\n    COMMIT_BOOKING_SUCCESS \r\n} from '../actions/booking-actions';\r\n\r\nconst defaultState = {\r\n    openedProperty : null,\r\n    pending: false,\r\n    error: false\r\n};\r\n\r\nexport default function setBookingDialog(state = defaultState, action){\r\n\r\n    switch(action.type){\r\n\r\n        //merge the openend property to state\r\n        case OPEN_BOOKING_DIALOG:\r\n            return Object.assign({}, state, {\r\n                openedProperty : action.openedProperty\r\n            });\r\n\r\n        //all actions share the same properties\r\n        //all three in one case for merging\r\n        case COMMIT_BOOKING_PENDING: \r\n        case COMMIT_BOOKING_ERROR: \r\n        case COMMIT_BOOKING_SUCCESS:\r\n            return Object.assign({}, state, {\r\n                pending : action.pending,\r\n                error : action.error\r\n            });\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}","import { combineReducers } from 'redux'\r\nimport findProperties from './find-properties-reducer';\r\nimport setBookingDialog from './booking-reducer';\r\n\r\n//initial reducer\r\nexport default combineReducers({\r\n    findProperties,\r\n    setBookingDialog\r\n});","import React from 'react'\r\nimport { render } from 'react-dom'\r\nimport { createStore } from 'redux'\r\nimport { Provider } from 'react-redux'\r\nimport App from './components/app'\r\nimport rootReducer from './reducers'\r\n\r\n//init store\r\nconst store = createStore(rootReducer);\r\n\r\n//build app \r\nrender(\r\n    <Provider store={store}>\r\n      <App store={store}/>\r\n    </Provider>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}